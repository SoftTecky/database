generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  user_id   Int      @id @unique @default(autoincrement())
  name      String
  lastname1 String
  lastname2 String?
  email     String   @unique
  password  String
  birthdate DateTime
  telephone String

  leader    users   @relation(fields: [leader_id], references: [user_id], name: "LeaderEmployee")
  leader_id Int
  employees users[] @relation(name: "LeaderEmployee")

  gender    genders @relation(fields: [gender_id], references: [gender_id])
  gender_id Int

  role    roles? @relation(fields: [role_id], references: [role_id])
  role_id Int

  team    teams? @relation(fields: [team_id], references: [team_id])
  team_id Int

  company    companies? @relation(fields: [company_id], references: [company_id])
  company_id Int

  profile profiles?

  posts posts[]

  comments comments[]

  reactions reactions[]

  evaluating_user evaluations[] @relation(name: "EvaluatingUser")
  evaluated_user  evaluations[] @relation(name: "EvaluatedUser")

  sender_messages   messages[] @relation(name: "MessageSenderUser")
  receiver_messages messages[] @relation(name: "MessageReceiverUser")

  connection_user   connections[] @relation(name: "ConnectionUser")
  connection_friend connections[] @relation(name: "ConnectionFriend")

  connection_request_user   connection_requests[] @relation(name: "ConnectionRequestUser")
  connection_request_friend connection_requests[] @relation(name: "ConnectionRequestFriend")

  notification_sender   notifications[] @relation(name: "NotificationSenderUser")
  notification_receiver notifications[] @relation(name: "NotificationReceiverUser")
}

model connections {
  connection_id Int      @id @unique @default(autoincrement())
  date          DateTime

  user    users @relation(fields: [user_id], references: [user_id], name: "ConnectionUser")
  user_id Int

  friend    users @relation(fields: [friend_id], references: [user_id], name: "ConnectionFriend")
  friend_id Int
}

model connection_requests {
  connectionRequest_id Int      @id @unique @default(autoincrement())
  date                 DateTime

  accepted Boolean

  user    users @relation(fields: [user_id], references: [user_id], name: "ConnectionRequestUser")
  user_id Int

  friend    users @relation(fields: [friend_id], references: [user_id], name: "ConnectionRequestFriend")
  friend_id Int
}

model genders {
  gender_id Int    @id @unique @default(autoincrement())
  name      String @unique

  users users[]
}

model roles {
  role_id Int    @id @unique @default(autoincrement())
  name    String @unique

  users users[]
}

model profiles {
  profile_id  Int     @id @unique @default(autoincrement())
  description String?

  user    users @relation(fields: [user_id], references: [user_id])
  user_id Int   @unique
}

model posts {
  post_id     Int      @id @unique @default(autoincrement())
  title       String
  description String
  date        DateTime

  reactions reactions?

  user    users @relation(fields: [user_id], references: [user_id])
  user_id Int   @unique

  comments comments[]
}

model reactions {
  reaction_id Int @id @unique @default(autoincrement())

  user    users @relation(fields: [user_id], references: [user_id])
  user_id Int   @unique

  post    posts @relation(fields: [post_id], references: [post_id])
  post_id Int   @unique

  type    reaction_types @relation(fields: [type_id], references: [reaction_type_id])
  type_id Int
}

model reaction_types {
  reaction_type_id Int    @id @unique @default(autoincrement())
  type             String

  reaction reactions[]
}

model comments {
  comment_id  Int      @id @unique @default(autoincrement())
  description String
  date        DateTime

  user    users @relation(fields: [user_id], references: [user_id])
  user_id Int   @unique

  post    posts @relation(fields: [post_id], references: [post_id])
  post_id Int   @unique
}

model companies {
  company_id Int    @id @unique @default(autoincrement())
  name       String
  link       String

  area    company_areas @relation(fields: [area_id], references: [area_id])
  area_id Int

  size    company_sizes @relation(fields: [size_id], references: [company_size_id])
  size_id Int

  type    company_types @relation(fields: [type_id], references: [company_type_id])
  type_id Int

  logo String

  description String

  address     addresses @relation(fields: [addresse_id], references: [address_id])
  addresse_id Int

  users users[]
  teams teams[]
}

model company_types {
  company_type_id Int    @id @unique @default(autoincrement())
  name            String

  companies companies[]
}

model company_areas {
  area_id Int    @id @unique @default(autoincrement())
  name    String

  companies companies[]
}

model company_sizes {
  company_size_id Int    @id @unique @default(autoincrement())
  name            String

  companies companies[]
}

model addresses {
  address_id Int    @id @unique @default(autoincrement())
  street     String
  suburb     String
  zip_code   String
  external   Int
  internal   Int

  city    cities @relation(fields: [city_id], references: [city_id])
  city_id Int    @unique

  companies companies[]
}

model countries {
  country_id Int    @id @unique @default(autoincrement())
  name       String

  states states[]
}

model states {
  state_id Int    @id @unique @default(autoincrement())
  name     String

  country    countries @relation(fields: [country_id], references: [country_id])
  country_id Int

  city cities[]
}

model cities {
  city_id Int    @id @unique @default(autoincrement())
  name    String

  state    states @relation(fields: [state_id], references: [state_id])
  state_id Int    @unique

  addresses addresses[]
}

model teams {
  team_id Int    @id @unique @default(autoincrement())
  name    String

  company    companies @relation(fields: [company_id], references: [company_id])
  company_id Int       @unique

  users users[]
}

model softskills {
  softskill_id Int    @id @unique @default(autoincrement())
  name         String

  evaluations evaluations[]
}

model evaluations {
  evaluation_id Int @id @unique @default(autoincrement())

  evaluating_user    users @relation(fields: [evaluating_user_id], references: [user_id], name: "EvaluatingUser")
  evaluating_user_id Int

  evaluated_user    users @relation(fields: [evaluated_user_id], references: [user_id], name: "EvaluatedUser")
  evaluated_user_id Int

  date   DateTime
  result Int

  softskill    softskills @relation(fields: [softskill_id], references: [softskill_id])
  softskill_id Int
}

model messages {
  message_id  Int      @id @unique @default(autoincrement())
  description String
  date        DateTime

  sender_user    users @relation(fields: [sender_user_id], references: [user_id], name: "MessageSenderUser")
  sender_user_id Int

  receiver_user    users @relation(fields: [receiver_user_id], references: [user_id], name: "MessageReceiverUser")
  receiver_user_id Int
}

model notifications {
  notification_id Int      @id @unique @default(autoincrement())
  description     String
  type            String
  date            DateTime
  read            Boolean

  sender_user    users @relation(fields: [sender_user_id], references: [user_id], name: "NotificationSenderUser")
  sender_user_id Int

  receiver_user    users @relation(fields: [receiver_user_id], references: [user_id], name: "NotificationReceiverUser")
  receiver_user_id Int
}
